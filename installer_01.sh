#!/bin/bash

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
ARCH=$(uname -m)
SUDO_PASSWORD=""
INSTALL_LOG="/tmp/setup_log_$(date +%s).txt"
TEMP_FILES=()
BACKTITLE="\Zb\Z2–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ | $(date +%Y-%m-%d)\Zn"
CONFIG_FILE="setup.conf"
MAX_RETRIES=3
TIMEOUT=300

# --- –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ---
declare -A TOOLS=(
    ["PyCharm"]="install_pycharm|IDE –¥–ª—è Python"
    ["VSCode"]="install_vscode|–õ—ë–≥–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞"
    ["DBeaver"]="install_dbeaver|–ö–ª–∏–µ–Ω—Ç –¥–ª—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"
    ["WireGuard"]="install_wireguard|VPN"
    ["kubectl_minikube"]="install_kubectl_minikube|Kubernetes –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
    ["DockerCompose"]="install_docker_compose|–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏"
    ["AWSCLI"]="install_awscli|–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è AWS"
    ["Telegram"]="install_telegram|–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä"
    ["Discord"]="install_discord|–ß–∞—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥"
    ["tmux"]="install_tmux|–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä"
    ["Postman"]="install_postman|–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API"
    ["zsh"]="install_zsh|–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞"
    ["httpie"]="install_httpie|–£–¥–æ–±–Ω—ã–π HTTP-–∫–ª–∏–µ–Ω—Ç"
)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π ---
trap 'cleanup; exit 1' TERM

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ---
show_progress() {
    local cmd="$1" title="$2" log_file="/tmp/install_$(date +%s).log"
    TEMP_FILES+=("$log_file")
    (
        echo "0"
        echo "XXX"
        echo "\Zb\Z2$title\Zn"
        echo "XXX"
        local percent=0
        local dots=""
        eval "$cmd" >> "$log_file" 2>&1 &  # –ò—Å–ø–æ–ª—å–∑—É–µ–º eval –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        local pid=$!
        while kill -0 $pid 2>/dev/null; do
            percent=$((percent + 2))
            [ $percent -gt 99 ] && percent=99
            dots=$(printf "%.$((percent % 4))s" "....")
            echo "$percent"
            echo "XXX"
            echo "\Zb\Z2$title $dots\Zn"
            echo "XXX"
            sleep 0.5
        done
        wait $pid
        if [ $? -eq 0 ]; then
            echo "100"
            echo "XXX"
            echo "\Zb\Z2$title –∑–∞–≤–µ—Ä—à–µ–Ω–æ\Zn"
            echo "XXX"
        else
            echo "0"
            echo "XXX"
            echo "\Zb\Z1–û—à–∏–±–∫–∞: $title\Zn"
            echo "XXX"
            check_error "$title (—Å–º. $log_file)"
        fi
    ) | dialog --colors --backtitle "$BACKTITLE" --title "$title" --gauge "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..." 10 70
}

# --- –ú–æ–¥—É–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
check_error() {
    if [ $? -ne 0 ]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] –û—à–∏–±–∫–∞: $1" >> "$INSTALL_LOG"
        dialog --colors --backtitle "$BACKTITLE" --title "\Zb\Z1–û—à–∏–±–∫–∞\Zn" --msgbox "–û—à–∏–±–∫–∞: $1\n–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $INSTALL_LOG" 10 50
        exit 1
    fi
}

check_installed() {
    command -v "$1" >/dev/null 2>&1 && return 0 || return 1
}

format_size() {
    local bytes=$1
    if [ "$bytes" -lt 1024 ]; then
        echo "${bytes}B"
    elif [ "$bytes" -lt $((1024 * 1024)) ]; then
        echo "$(echo "scale=2; $bytes / 1024" | bc)KB"
    elif [ "$bytes" -lt $((1024 * 1024 * 1024)) ]; then
        echo "$(echo "scale=2; $bytes / (1024 * 1024)" | bc)MB"
    else
        echo "$(echo "scale=2; $bytes / (1024 * 1024 * 1024)" | bc)GB"
    fi
}

retry_curl() {
    local url=$1 output=$2 attempt=1 size downloaded dots=""
    size=$(curl -sI --connect-timeout 10 "$url" | grep -i Content-Length | awk '{print $2}' | tr -d '\r')
    [ -z "$size" ] && size=0
    while [ $attempt -le $MAX_RETRIES ]; do
        if [ "$size" -gt 0 ]; then
            (
                curl -s --max-time "$TIMEOUT" "$url" -o "$output" 2>>"$INSTALL_LOG" &
                local pid=$!
                local percent=0
                while kill -0 $pid 2>/dev/null; do
                    percent=$((percent + 2))
                    [ $percent -gt 99 ] && percent=99
                    downloaded=$((size * percent / 100))
                    formatted_downloaded=$(format_size "$downloaded")
                    formatted_size=$(format_size "$size")
                    dots=$(printf "%.$((percent % 4))s" "....")
                    echo "$percent"
                    echo "XXX"
                    echo "\Zb\Z2–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: $formatted_downloaded / $formatted_size ($percent%) $dots\Zn"
                    echo "XXX"
                    sleep 0.5
                done
                wait $pid
                [ $? -eq 0 ] && echo "100" || echo "0"
                echo "XXX"
                [ $? -eq 0 ] && echo "\Zb\Z2–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\Zn" || echo "\Zb\Z1–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\Zn"
                echo "XXX"
            ) | dialog --colors --backtitle "$BACKTITLE" --title "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ $output" --gauge "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..." 10 70
            [ $? -eq 0 ] && return 0
        else
            show_progress "curl -s --max-time $TIMEOUT $url -o $output" "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ $output"
            [ $? -eq 0 ] && return 0
        fi
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] –ü–æ–ø—ã—Ç–∫–∞ $attempt –∏–∑ $MAX_RETRIES –¥–ª—è $url –Ω–µ —É–¥–∞–ª–∞—Å—å" >>"$INSTALL_LOG"
        sleep 2
        attempt=$((attempt + 1))
    done
    check_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å $url –ø–æ—Å–ª–µ $MAX_RETRIES –ø–æ–ø—ã—Ç–æ–∫"
}

detect_package_manager() {
    if command -v apt-get >/dev/null 2>&1; then
        PKG_MANAGER="apt-get"
        UPDATE_CMD="apt-get update"
        INSTALL_CMD="apt-get install -y"
        REMOVE_CMD="apt-get remove -y"
    elif command -v yum >/dev/null 2>&1; then
        PKG_MANAGER="yum"
        UPDATE_CMD="yum update -y"
        INSTALL_CMD="yum install -y"
        REMOVE_CMD="yum remove -y"
    elif command -v dnf >/dev/null 2>&1; then
        PKG_MANAGER="dnf"
        UPDATE_CMD="dnf update -y"
        INSTALL_CMD="dnf install -y"
        REMOVE_CMD="dnf remove -y"
    elif command -v pacman >/dev/null 2>&1; then
        PKG_MANAGER="pacman"
        UPDATE_CMD="pacman -Syu --noconfirm"
        INSTALL_CMD="pacman -S --noconfirm"
        REMOVE_CMD="pacman -R --noconfirm"
    elif command -v zypper >/dev/null 2>&1; then
        PKG_MANAGER="zypper"
        UPDATE_CMD="zypper refresh"
        INSTALL_CMD="zypper install -y"
        REMOVE_CMD="zypper remove -y"
    else
        check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
    fi
}

request_sudo_password() {
    SUDO_PASSWORD=$(dialog --colors --backtitle "$BACKTITLE" --insecure --passwordbox "\Zb\Z2–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è sudo:\Zn" 8 40 3>&1 1>&2 2>&3)
    if [ -z "$SUDO_PASSWORD" ] || ! echo "$SUDO_PASSWORD" | sudo -S -v >/dev/null 2>&1; then
        dialog --colors --backtitle "$BACKTITLE" --title "\Zb\Z1–û—à–∏–±–∫–∞\Zn" --msgbox "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å sudo –∏–ª–∏ –≤–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω." 10 50
        exit 1
    fi
}

check_url() {
    show_progress "curl -Is --connect-timeout 10 $1 | head -n 1 | grep -q 200" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ $1"
}

select_version() {
    local tool=$1
    if [ "$tool" = "python" ]; then
        VERSION=$(dialog --colors --backtitle "$BACKTITLE" --menu "\Zb\Z2–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é Python:\Zn" 12 40 5 \
            "3.9" "Python 3.9" \
            "3.10" "Python 3.10" \
            "3.11" "Python 3.11" \
            "3.12" "Python 3.12" \
            "latest" "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è" 2>&1 >/dev/tty)
        check_error "–≤—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏ Python"
    elif [ "$tool" = "node" ]; then
        VERSION=$(dialog --colors --backtitle "$BACKTITLE" --menu "\Zb\Z2–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é Node.js:\Zn" 12 40 5 \
            "16" "Node.js 16 LTS" \
            "18" "Node.js 18 LTS" \
            "20" "Node.js 20 LTS" \
            "lts" "–ü–æ—Å–ª–µ–¥–Ω—è—è LTS" \
            "latest" "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è" 2>&1 >/dev/tty)
        check_error "–≤—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏ Node.js"
    fi
    echo "$VERSION"
}

backup_file() {
    local file=$1
    [ -f "$file" ] && show_progress "cp $file $file.bak_$(date +%s)" "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ $file"
}

remove_old_version() {
    local pkg=$1 old_ver=$2
    if command -v "$old_ver" >/dev/null 2>&1; then
        dialog --colors --backtitle "$BACKTITLE" --yesno "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è $pkg ($old_ver). –£–¥–∞–ª–∏—Ç—å?" 8 50
        if [ $? -eq 0 ]; then
            show_progress "echo \"$SUDO_PASSWORD\" | sudo -S $REMOVE_CMD $old_ver" "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ $pkg ($old_ver)"
        fi
    fi
}

install_dialog() {
    if ! check_installed dialog; then
        detect_package_manager
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S $INSTALL_CMD dialog" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ dialog"
    fi
}

install_base_tools() {
    local pkgs=""
    for pkg in pv unzip curl; do
        check_installed "$pkg" || pkgs="$pkgs $pkg"
    done
    if [ -n "$pkgs" ]; then
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S $INSTALL_CMD $pkgs" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç"
    fi
}

install_snap() {
    if ! check_installed snap; then
        if [ "$PKG_MANAGER" = "apt-get" ]; then
            show_progress "echo \"$SUDO_PASSWORD\" | sudo -S $INSTALL_CMD snapd" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ snapd"
        elif [ "$PKG_MANAGER" = "yum" ] || [ "$PKG_MANAGER" = "dnf" ]; then
            show_progress "echo \"$SUDO_PASSWORD\" | sudo -S $INSTALL_CMD epel-release snapd" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ snapd"
            show_progress "echo \"$SUDO_PASSWORD\" | sudo -S ln -s /var/lib/snapd/snap /snap" "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è snap"
        elif [ "$PKG_MANAGER" = "pacman" ]; then
            show_progress "echo \"$SUDO_PASSWORD\" | sudo -S $INSTALL_CMD snapd" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ snapd"
            show_progress "echo \"$SUDO_PASSWORD\" | sudo -S systemctl enable --now snapd.socket" "–ê–∫—Ç–∏–≤–∞—Ü–∏—è snapd.socket"
        elif [ "$PKG_MANAGER" = "zypper" ]; then
            show_progress "echo \"$SUDO_PASSWORD\" | sudo -S $INSTALL_CMD snapd" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ snapd"
            show_progress "echo \"$SUDO_PASSWORD\" | sudo -S systemctl enable --now snapd" "–ê–∫—Ç–∏–≤–∞—Ü–∏—è snapd"
        fi
    fi
}

check_dependencies() {
    show_progress "ping -c 1 1.1.1.1 >/dev/null 2>&1" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"
    if [ $? -ne 0 ]; then
        check_error "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"
    fi
    FREE_SPACE=$(df -h / | awk 'NR==2 {print $4}' | tr -d 'G')
    if [ -z "$FREE_SPACE" ] || [ $(echo "$FREE_SPACE < 5" | bc) -eq 1 ]; then
        check_error "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è 5G)"
    fi
}

update_system() {
    show_progress "echo \"$SUDO_PASSWORD\" | sudo -S $UPDATE_CMD" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"
    if [ $? -ne 0 ]; then
        dialog --colors --backtitle "$BACKTITLE" --title "\Zb\Z3–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\Zn" --yesno "‚ö† –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É?" 10 50
        [ $? -ne 0 ] && check_error "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    fi
}

install_mandatory_components() {
    local pkgs=""
    check_installed curl || pkgs="$pkgs curl"
    check_installed python3 || pkgs="$pkgs python3 python3-pip python3-dev"
    check_installed vim || pkgs="$pkgs vim"
    check_installed git || pkgs="$pkgs git"
    check_installed make || pkgs="$pkgs make"
    [ "$PKG_MANAGER" = "apt-get" ] && check_installed gcc || pkgs="$pkgs build-essential"

    PYTHON_VERSION=$(select_version "python")
    if [ "$PYTHON_VERSION" != "latest" ]; then
        pkgs=$(echo "$pkgs" | sed "s/python3/python3.$PYTHON_VERSION/")
        remove_old_version "Python" "python3.9"
    fi

    if [ -n "$pkgs" ]; then
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S $INSTALL_CMD $pkgs" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S pip3 install virtualenv pipenv" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ virtualenv/pipenv"
    fi
    if ! check_installed docker; then
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S $INSTALL_CMD docker.io" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S systemctl enable docker" "–ê–∫—Ç–∏–≤–∞—Ü–∏—è Docker"
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S systemctl start docker" "–ó–∞–ø—É—Å–∫ Docker"
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S usermod -aG docker $USER" "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É Docker"
    fi
}

configure_git() {
    GIT_NAME=$(git config --global --get user.name)
    GIT_EMAIL=$(git config --global --get user.email)
    if [ -n "$GIT_NAME" ] && [ -n "$GIT_EMAIL" ]; then
        dialog --colors --backtitle "$BACKTITLE" --yesno "Git —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $GIT_NAME <$GIT_EMAIL>\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é?" 10 50
        if [ $? -eq 0 ]; then
            NEW_GIT_NAME=$(dialog --colors --backtitle "$BACKTITLE" --inputbox "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è Git:" 8 40 "$GIT_NAME" 3>&1 1>&2 2>&3)
            NEW_GIT_EMAIL=$(dialog --colors --backtitle "$BACKTITLE" --inputbox "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –¥–ª—è Git:" 8 40 "$GIT_EMAIL" 3>&1 1>&2 2>&3)
            if [ -n "$NEW_GIT_NAME" ] && [ -n "$NEW_GIT_EMAIL" ]; then
                show_progress "git config --global user.name \"$NEW_GIT_NAME\"" "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–º–µ–Ω–∏ Git"
                show_progress "git config --global user.email \"$NEW_GIT_EMAIL\"" "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ email Git"
                dialog --colors --backtitle "$BACKTITLE" --msgbox "\Zb\Z2‚úÖ Git –æ–±–Ω–æ–≤–ª—ë–Ω: $NEW_GIT_NAME <$NEW_GIT_EMAIL>\Zn" 10 50
            fi
        fi
    else
        GIT_NAME=$(dialog --colors --backtitle "$BACKTITLE" --inputbox "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è Git:" 8 40 3>&1 1>&2 2>&3)
        GIT_EMAIL=$(dialog --colors --backtitle "$BACKTITLE" --inputbox "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è Git:" 8 40 3>&1 1>&2 2>&3)
        if [ -n "$GIT_NAME" ] && [ -n "$GIT_EMAIL" ]; then
            show_progress "git config --global user.name \"$GIT_NAME\"" "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–º–µ–Ω–∏ Git"
            show_progress "git config --global user.email \"$GIT_EMAIL\"" "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ email Git"
            dialog --colors --backtitle "$BACKTITLE" --msgbox "\Zb\Z2‚úÖ Git –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $GIT_NAME <$GIT_EMAIL>\Zn" 10 50
        fi
    fi
}

install_nvm_node() {
    NODE_VERSION=$(select_version "node")
    local nvm_install_file="/tmp/nvm_install_$(date +%s).sh"
    TEMP_FILES+=("$nvm_install_file")
    if ! check_installed nvm; then
        NVM_URL="https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh"
        check_url "$NVM_URL"
        retry_curl "$NVM_URL" "$nvm_install_file"
        show_progress "chmod +x $nvm_install_file && bash $nvm_install_file" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ NVM"
    fi
    mkdir -p "$HOME/.nvm"
    chmod -R u+rwX "$HOME/.nvm"
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    show_progress "nvm install $NODE_VERSION" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js $NODE_VERSION"
}

# --- –§—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ---
install_pycharm() {
    if ! check_installed pycharm-community; then
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S snap install pycharm-community --classic --no-wait" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyCharm"
    fi
}

install_vscode() {
    if ! check_installed code; then
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S snap install code --classic --no-wait" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ VS Code"
        sleep 2  # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥—ã –≤ PATH
        if check_installed code; then
            show_progress "code --install-extension ms-python.python" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è Python –¥–ª—è VS Code"
            show_progress "code --install-extension ms-azuretools.vscode-docker" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è Docker –¥–ª—è VS Code"
        else
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] –û—à–∏–±–∫–∞: VS Code –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏" >> "$INSTALL_LOG"
        fi
    fi
}

install_dbeaver() {
    if ! check_installed dbeaver-ce; then
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S snap install dbeaver-ce --no-wait" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ DBeaver"
    fi
}

install_wireguard() {
    if ! check_installed wg; then
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S $INSTALL_CMD wireguard" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard"
    fi
}

install_kubectl_minikube() {
    if ! check_installed kubectl; then
        KUBECTL_URL="https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/$([ "$ARCH" = "aarch64" ] && echo "arm64" || echo "amd64")/kubectl"
        check_url "$KUBECTL_URL"
        retry_curl "$KUBECTL_URL" "kubectl"
        show_progress "chmod +x kubectl && echo \"$SUDO_PASSWORD\" | sudo -S mv kubectl /usr/local/bin/" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ kubectl"
    fi
    if ! check_installed minikube; then
        MINIKUBE_URL="https://storage.googleapis.com/minikube/releases/latest/minikube-linux-$([ "$ARCH" = "aarch64" ] && echo "arm64" || echo "amd64")"
        check_url "$MINIKUBE_URL"
        retry_curl "$MINIKUBE_URL" "minikube-linux-$([ "$ARCH" = "aarch64" ] && echo "arm64" || echo "amd64")"
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S install minikube-linux-$([ "$ARCH" = "aarch64" ] && echo "arm64" || echo "amd64") /usr/local/bin/minikube" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ minikube"
        TEMP_FILES+=("minikube-linux-$([ "$ARCH" = "aarch64" ] && echo "arm64" || echo "amd64")")
    fi
}

install_docker_compose() {
    if ! check_installed docker-compose; then
        DOCKER_COMPOSE_URL="https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$([ "$ARCH" = "aarch64" ] && echo "aarch64" || echo "x86_64")"
        check_url "$DOCKER_COMPOSE_URL"
        retry_curl "$DOCKER_COMPOSE_URL" "/usr/local/bin/docker-compose"
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S chmod +x /usr/local/bin/docker-compose" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose"
    fi
}

install_awscli() {
    if ! check_installed aws; then
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S pip3 install awscli" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ AWS CLI"
    fi
}

install_telegram() {
    if ! check_installed telegram-desktop; then
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S snap install telegram-desktop --no-wait" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram"
    fi
}

install_discord() {
    if ! check_installed discord; then
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S snap install discord --no-wait" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Discord"
    fi
}

install_tmux() {
    if ! check_installed tmux; then
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S $INSTALL_CMD tmux" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ tmux"
    fi
}

install_postman() {
    if ! check_installed postman; then
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S snap install postman --no-wait" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Postman"
    fi
}

install_zsh() {
    if ! check_installed zsh; then
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S $INSTALL_CMD zsh" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ zsh"
        show_progress "sh -c \"\$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" --unattended" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Oh My Zsh"
        backup_file "$HOME/.zshrc"
        show_progress "sed -i 's/ZSH_THEME=\"robbyrussell\"/ZSH_THEME=\"agnoster\"/' \"$HOME/.zshrc\"" "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã zsh"
        echo "plugins=(git docker kubectl python)" >> "$HOME/.zshrc"
        if [ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions" ]; then
            show_progress "git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ zsh-autosuggestions"
        fi
        if [ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting" ]; then
            show_progress "git clone https://github.com/zsh-users/zsh-syntax-highlighting ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ zsh-syntax-highlighting"
        fi
        echo "source ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" >> "$HOME/.zshrc"
        echo "source ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" >> "$HOME/.zshrc"
    fi
}

install_httpie() {
    if ! check_installed http; then
        show_progress "echo \"$SUDO_PASSWORD\" | sudo -S pip3 install httpie" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ httpie"
    fi
}

select_optional_components() {
    if [ -f "$CONFIG_FILE" ]; then
        dialog --colors --backtitle "$BACKTITLE" --yesno "–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ $CONFIG_FILE. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ?" 8 50
        if [ $? -eq 0 ]; then
            CHOICES=$(cat "$CONFIG_FILE")
            return
        fi
    fi
    local checklist=()
    for tool in "${!TOOLS[@]}"; do
        IFS='|' read -r func desc <<< "${TOOLS[$tool]}"
        checklist+=("$tool" "$desc" "off")
    done
    dialog --colors --backtitle "$BACKTITLE" --checklist "\Zb\Z2–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:\Zn" 25 70 17 "${checklist[@]}" 2>/tmp/choices.txt
    TEMP_FILES+=("/tmp/choices.txt")
    CHOICES=$(cat /tmp/choices.txt)
    if [ -n "$CHOICES" ]; then
        dialog --colors --backtitle "$BACKTITLE" --yesno "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä –≤ $CONFIG_FILE?" 8 50
        [ $? -eq 0 ] && echo "$CHOICES" > "$CONFIG_FILE"
    fi
}

install_optional_components() {
    if [ -n "$CHOICES" ]; then
        TOTAL_STEPS=$(echo "$CHOICES" | wc -w)
        STEP=0
        (
            echo "0"
            echo "XXX"
            echo "\Zb\Z2–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\Zn"
            echo "XXX"
            sleep 1
            for tool in $CHOICES; do
                tool=$(echo "$tool" | tr -d '"')
                if [[ -n "${TOOLS[$tool]}" ]]; then
                    STEP=$((STEP + 1))
                    percent=$((STEP * 100 / TOTAL_STEPS))
                    echo "$percent"
                    echo "XXX"
                    echo "\Zb\Z2–£—Å—Ç–∞–Ω–æ–≤–∫–∞ $tool ($STEP/$TOTAL_STEPS)\Zn"
                    echo "XXX"
                    IFS='|' read -r install_func desc <<< "${TOOLS[$tool]}"
                    "$install_func"
                fi
            done
            echo "100"
            echo "XXX"
            echo "\Zb\Z2–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\Zn"
            echo "XXX"
        ) | dialog --colors --backtitle "$BACKTITLE" --title "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤" --gauge "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..." 10 70
    fi
}

check_versions() {
    VERSIONS="üîç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏:\n\n"
    VERSIONS="$VERSIONS$(python3 --version 2>/dev/null || echo "Python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed virtualenv && virtualenv --version || echo "virtualenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed pipenv && pipenv --version || echo "pipenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(docker --version 2>/dev/null || echo "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed pycharm-community && pycharm-community --version 2>/dev/null || echo "PyCharm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed code && code --version 2>/dev/null || echo "VS Code –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed dbeaver-ce && dbeaver-ce --version 2>/dev/null || echo "DBeaver –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(vim --version | head -n 1 2>/dev/null || echo "Vim –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(node --version 2>/dev/null || echo "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª)")\n"
    VERSIONS="$VERSIONS$(git --version 2>/dev/null || echo "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed wg && wg --version 2>/dev/null || echo "WireGuard –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed telegram-desktop && telegram-desktop --version 2>/dev/null || echo "Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed discord && discord --version 2>/dev/null || echo "Discord –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed tmux && tmux -V || echo "tmux –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed postman && postman --version 2>/dev/null || echo "Postman –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed kubectl && kubectl version --client || echo "kubectl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed minikube && minikube version || echo "minikube –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed docker-compose && docker-compose --version || echo "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed zsh && zsh --version || echo "zsh –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed aws && aws --version || echo "AWS CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    VERSIONS="$VERSIONS$(check_installed http && http --version || echo "httpie –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")\n"
    dialog --colors --backtitle "$BACKTITLE" --title "\Zb\Z2–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π\Zn" --msgbox "$VERSIONS" 25 70
}

test_installation() {
    TEST_RESULTS="üõ† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:\n\n"
    TEST_RESULTS="$TEST_RESULTS$(check_installed python3 && echo "‚úÖ Python —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå Python –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")\n"
    TEST_RESULTS="$TEST_RESULTS$(check_installed docker && docker run --rm hello-world >/dev/null 2>&1 && echo "‚úÖ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå Docker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")\n"
    TEST_RESULTS="$TEST_RESULTS$(check_installed git && git --version >/dev/null 2>&1 && echo "‚úÖ Git —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå Git –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")\n"
    TEST_RESULTS="$TEST_RESULTS$(check_installed zsh && zsh -c "exit" >/dev/null 2>&1 && echo "‚úÖ zsh —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå zsh –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")\n"
    TEST_RESULTS="$TEST_RESULTS$(check_installed code && code --list-extensions | grep -q ms-python.python && echo "‚úÖ VS Code –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç" || echo "‚ùå VS Code –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")\n"
    TEST_RESULTS="$TEST_RESULTS$(check_installed node && node -e "console.log('Node.js OK')" >/dev/null 2>&1 && echo "‚úÖ Node.js —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå Node.js –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")\n"
    TEST_RESULTS="$TEST_RESULTS$(check_installed aws && aws --version >/dev/null 2>&1 && echo "‚úÖ AWS CLI —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå AWS CLI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")\n"
    TEST_RESULTS="$TEST_RESULTS$(check_installed kubectl && kubectl version --client >/dev/null 2>&1 && echo "‚úÖ kubectl —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå kubectl –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")\n"
    dialog --colors --backtitle "$BACKTITLE" --title "\Zb\Z2–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏\Zn" --msgbox "$TEST_RESULTS" 15 60
}

cleanup() {
    for file in "${TEMP_FILES[@]}"; do
        [ -f "$file" ] && rm -f "$file" && echo "–£–¥–∞–ª—ë–Ω $file" >>"$INSTALL_LOG"
    done
    dialog --colors --backtitle "$BACKTITLE" --msgbox "\Zb\Z2üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\Zn\n–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $INSTALL_LOG\n–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 'zsh' –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª.\n–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n- nvm use $NODE_VERSION\n- aws configure" 12 60
    if check_installed zsh; then
        dialog --colors --backtitle "$BACKTITLE" --yesno "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å zsh –æ–±–æ–ª–æ—á–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?" 8 50
        if [ $? -eq 0 ]; then
            show_progress "echo \"$SUDO_PASSWORD\" | sudo -S chsh -s $(which zsh) $USER" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ zsh –∫–∞–∫ –æ–±–æ–ª–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            dialog --colors --backtitle "$BACKTITLE" --msgbox "\Zb\Z2‚úÖ zsh —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ–±–æ–ª–æ—á–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\Zn\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è." 10 50
        fi
    fi
}

# --- –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ---
if [ "$ARCH" != "x86_64" ] && [ "$ARCH" != "aarch64" ]; then
    echo "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è x86_64 –∏ aarch64. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ $ARCH" >>"$INSTALL_LOG"
fi

detect_package_manager
request_sudo_password
install_dialog
install_base_tools
install_snap
check_dependencies
update_system
install_mandatory_components
configure_git
install_nvm_node
select_optional_components
install_optional_components
check_versions
test_installation
cleanup